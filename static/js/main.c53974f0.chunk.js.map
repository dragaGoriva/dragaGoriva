{"version":3,"sources":["components/GasPrice.js","components/station.js","App.js","reportWebVitals.js","index.js"],"names":["GasPrice","className","id","this","props","price","95","dizel","98","100","dizelpremium","avtoplinlpg","KOEL","gasKey","replace","React","Component","Station","selection","onSelectStation","stationData","onClick","style","selectedId","pk","backgroundColor","name","address","Object","keys","prices","length","map","key","App","getGeoLocation","lat","undefined","lng","console","log","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setState","myPos","clearGeo","selectStation","data","selected","state","searchString","datas","results","stationName","fuelType","distanceValue","allData","fetch","then","res","json","myJson","e","value","target","d","arr","indexOf","push","splice","lat2","long2","lat1","long1","dist","distance","Math","sin","PI","cos","abs","acos","gasNames","dataChart","labels","a","dateRecorded","datasets","label","fill","borderColor","filter","i","hasThisFuel","f","includes","CalculateDistance","toLocaleLowerCase","franchise","TextField","variant","margin","background","onChange","handleSearchChange","FormControl","sx","m","InputLabel","shrink","Select","labelId","multiple","fullWidth","handleChange","input","OutlinedInput","notched","renderValue","forEach","s","sName","names","find","n","join","MenuProps","maxHeight","MenuItem","Checkbox","checked","ListItemText","primary","handleChangeFuel","display","alignItems","handleChangeDistance","Button","color","marginBottom","b","index","options","scales","y","beginAtZero","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c53974f0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass GasPrice extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   // gasKey\r\n  //   // price\r\n\r\n  //   // this.state = {\r\n  //   //   isShow: true,\r\n  //   // };\r\n  // }\r\n\r\n  render() {\r\n\r\n    const names = {\r\n      95: \"NMB-95\",\r\n      dizel: \"Dizel\",\r\n      98: \"NMB-98\",\r\n      100: \"NMB-100\",\r\n      dizelpremium: \"Dizel Premium\",\r\n      avtoplinlpg: \"Avtoplin LPG\",\r\n      KOEL: \"Ekstra lahko kurilno olje\",\r\n      }\r\n\r\n    return (\r\n      <div className=\"gasPrice\">\r\n        <div id=\"price\">{this.props.price}</div>\r\n        <div id=\"key\">{names[this.props.gasKey.replace(\"-\", \"\")]}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GasPrice;\r\n","import React from 'react'\r\nimport './compCss/station.css'\r\nimport GasPrice from './GasPrice';\r\n\r\nclass Station extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   // stationData\r\n  //   // onSelectStation\r\n  //   // selectedId\r\n \r\n  //   // this.state = {\r\n  //   //   isShow: true,\r\n  //   // };\r\n  // }\r\n\r\n  selection = () => {\r\n    this.props.onSelectStation(this.props.stationData)\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"Station\" onClick={this.selection} style={this.props.selectedId === this.props.stationData.pk ? {backgroundColor:\"#d3d3d3\"}: {}}>\r\n        <div id=\"Name\">{this.props.stationData.name} </div>\r\n        <div id=\"Address\">{this.props.stationData.address}</div>\r\n        <div className=\"prices\">\r\n          {Object.keys(this.props.stationData.prices[this.props.stationData.prices.length - 1]).map(key => \r\n            {\r\n              if(this.props.stationData.prices[this.props.stationData.prices.length - 1][key] != null && key !== \"dateRecorded\")\r\n                return <GasPrice gasKey={key} price={this.props.stationData.prices[this.props.stationData.prices.length - 1][key]}/>\r\n              return undefined\r\n            }\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Station;\r\n","import React from 'react'\r\n// import ReactDOM from 'react-dom'\r\n// import { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport './App.css';\r\nimport datas from './jsonDataAll.json';\r\nimport names from './stationNames.json';\r\nimport Station from './components/station';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Select from '@mui/material/Select';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { Button } from '@mui/material';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchString: \"\",\r\n      selected: datas.results[0],\r\n      selectedId: datas.results[0].pk,\r\n      stationName: [],\r\n      fuelType: [],\r\n      myPos: undefined,\r\n      distanceValue: 0,\r\n      allData: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(this.state.allData === undefined) {\r\n      fetch(\"https://raw.githubusercontent.com/dragaGoriva/dragaGoriva/main/src/jsonDataAll.json\").then(res => {\r\n        // console.log(\"res\", res.json());\r\n        // this.setState({allData: res.json()});\r\n        return res.json();\r\n      }).then(myJson => {\r\n        this.setState({allData: myJson});\r\n      })\r\n    }\r\n  }\r\n\r\n  handleSearchChange(e) {\r\n    let value = e.target.value\r\n    this.setState({\r\n      searchString: value\r\n    });\r\n  }\r\n\r\n  handleChange(e, d) {\r\n    let arr = this.state.stationName;\r\n    let value = d.props.value;\r\n    console.log(arr.indexOf(value))\r\n    if (arr.indexOf(value) === -1)\r\n      arr.push(value)\r\n    else\r\n      arr.splice(arr.indexOf(value), 1)\r\n    console.log(arr)\r\n\r\n    this.setState({\r\n      stationName: arr\r\n    })\r\n  }\r\n\r\n  handleChangeFuel(e, d) {\r\n    let arr = this.state.fuelType;\r\n    let value = d.props.value;\r\n    console.log(arr.indexOf(value))\r\n    if (arr.indexOf(value) === -1)\r\n      arr.push(value)\r\n    else\r\n      arr.splice(arr.indexOf(value), 1)\r\n    console.log(arr)\r\n\r\n    this.setState({\r\n      fuelType: arr\r\n    })\r\n  }\r\n\r\n  handleChangeDistance(e) {\r\n    this.setState({\r\n      distanceValue: e.target.value\r\n    })\r\n  }\r\n\r\n  getGeoLocation = () => {\r\n    let lat = undefined\r\n    let lng = undefined\r\n    console.log(\"aa\")\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((pos) => {\r\n        console.log(pos.coords.latitude)\r\n        console.log(pos.coords.longitude)\r\n        lat = pos.coords.latitude;\r\n        lng = pos.coords.longitude;\r\n        this.setState({\r\n          myPos: [lat, lng]\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  clearGeo = () => {\r\n    this.setState({\r\n      myPos: undefined\r\n    })\r\n  }\r\n\r\n  selectStation = (data) => {\r\n    console.log(\"data\", data)\r\n    this.setState({\r\n      selected: data,\r\n      selectedId: data.pk\r\n    });\r\n  }\r\n\r\n  CalculateDistance(lat2, long2) {\r\n    let lat1 = this.state.myPos[0];\r\n    let long1 = this.state.myPos[1];\r\n    let dist = this.state.distanceValue;\r\n\r\n    // Translate to a distance\r\n    var distance = Math.sin(lat1 * Math.PI) * Math.sin(lat2 * Math.PI) + Math.cos(lat1 * Math.PI) * Math.cos(lat2 * Math.PI) * Math.cos(Math.abs(long1 - long2) * Math.PI);\r\n    // Return the distance in miles\r\n    //return Math.acos(distance) * 3958.754;\r\n\r\n    // Return the distance in meters\r\n    // console.log(dist);\r\n    // console.log(Math.acos(distance) * 6370981.162);\r\n    return Math.acos(distance) * 6370981.162 / 100 < dist;\r\n  } // CalculateDistance\r\n\r\n  render() {\r\n\r\n    const gasNames = [\r\n      {\r\n        name: \"NMB-95\",\r\n        key: \"95\"\r\n      },\r\n      {\r\n        name: \"Dizel\",\r\n        key: \"dizel\"\r\n      },\r\n      {\r\n        name: \"NMB-98\",\r\n        key: \"98\"\r\n      },\r\n      {\r\n        name: \"NMB-100\",\r\n        key: \"100\"\r\n      },\r\n      {\r\n        name: \"Dizel Premium\",\r\n        key: \"dizel-premium\"\r\n      },\r\n      {\r\n        name: \"Avtoplin LPG\",\r\n        key: \"avtoplin-lpg\"\r\n      },\r\n      {\r\n        name: \"Ekstra lahko kurilno olje\",\r\n        key: \"KOEL\"\r\n      },\r\n    ]\r\n\r\n    const distance = [\r\n      {\r\n        key: 9999999999999,\r\n        name: \"Prikaži vse\"\r\n      },\r\n      {\r\n        key: 1000,\r\n        name: \"1 km\"\r\n      },\r\n      {\r\n        key: 5000,\r\n        name: \"5 km\"\r\n      },\r\n      {\r\n        key: 10000,\r\n        name: \"10 km\"\r\n      },\r\n      {\r\n        key: 15000,\r\n        name: \"15 km\"\r\n      },\r\n      {\r\n        key: 20000,\r\n        name: \"20 km\"\r\n      },\r\n      {\r\n        key: 50000,\r\n        name: \"50 km\"\r\n      },\r\n      {\r\n        key: 100000,\r\n        name: \"100 km\"\r\n      }\r\n    ]\r\n\r\n    let dataChart = {\r\n      labels: this.state.selected.prices.map(a => a.dateRecorded),\r\n      datasets: [\r\n        {\r\n          label: 'Bencin 95',\r\n          data: this.state.selected.prices.map(a => a[\"95\"]),\r\n          fill: false,\r\n          backgroundColor: 'red',\r\n          borderColor: 'red',\r\n        },\r\n        {\r\n          label: 'Bencin 100',\r\n          data: this.state.selected.prices.map(a => a[\"100\"]),\r\n          fill: false,\r\n          backgroundColor: \"blue\",\r\n          borderColor: 'blue',\r\n        },\r\n        {\r\n          label: 'dizel',\r\n          data: this.state.selected.prices.map(a => a[\"dizel\"]),\r\n          fill: false,\r\n          backgroundColor: 'green',\r\n          borderColor: 'green',\r\n        }\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      scales: {\r\n        y: {\r\n          beginAtZero: false\r\n        }\r\n      }\r\n    };\r\n    \r\n    let data = this.state.allData !== undefined ? this.state.allData.results.filter((d, i) => {\r\n      let hasThisFuel = [false];\r\n      if (this.state.fuelType.length > 0) {\r\n        hasThisFuel = this.state.fuelType.map((f, i) => {\r\n          if (d.prices[d.prices.length - 1][f] != null) {\r\n            return true\r\n          }\r\n        });\r\n      }\r\n      hasThisFuel = hasThisFuel.includes(true);\r\n      // console.log(\"hasThisFuel\", hasThisFuel)\r\n      if (this.state.myPos !== undefined) {\r\n        console.log(this.CalculateDistance(d.lat, d.lng))\r\n      }\r\n      // console.log(\"loc\", this.state.myPos)\r\n      return (d.name.toLocaleLowerCase().includes(this.state.searchString.toLocaleLowerCase()) ||\r\n        d.address.toLocaleLowerCase().includes(this.state.searchString.toLocaleLowerCase())) &&\r\n        (this.state.stationName.length > 0 ? this.state.stationName.indexOf(d.franchise) !== -1 : true) &&\r\n        (this.state.fuelType.length > 0 ? hasThisFuel : true) &&\r\n        (this.state.myPos !== undefined ? this.CalculateDistance(d.lat, d.lng) : true)\r\n    }) : undefined;\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"leftSide\">\r\n          <div className=\"leftSearch\">\r\n            <TextField id=\"standard-basic\" label=\"Išči\" variant=\"outlined\" style={{ margin: \"8px\", background: \"white\" }} onChange={(e) => this.handleSearchChange(e)} />\r\n\r\n            <FormControl sx={{ m: 1 }} style={{ background: \"white\" }}>\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" shrink={this.state.stationName.length > 0 ? true : false}>Prodajalec</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                fullWidth\r\n                value={this.state.stationName}\r\n                onChange={(e, d) => this.handleChange(e, d)}\r\n                input={<OutlinedInput label=\"Prodajalec\" notched={this.state.stationName.length > 0 ? true : false} />}\r\n                renderValue={(selected) => {\r\n                  let arr = [];\r\n                  selected.forEach(s => {\r\n                    let sName = names.find(n => n.pk === s);\r\n                    arr.push(sName.name)\r\n                  })\r\n                  return arr.join(\", \")\r\n                }}\r\n                MenuProps= {{\r\n                  style: {\r\n                    maxHeight: \"70vh\",\r\n                  }\r\n                }}\r\n              >\r\n                {names.map((name) => (\r\n                  <MenuItem key={name.name} value={name.pk}>\r\n                    <Checkbox checked={this.state.stationName.indexOf(name.pk) > -1} />\r\n                    <ListItemText primary={name.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl sx={{ m: 1 }} style={{ background: \"white\" }}>\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" shrink={this.state.fuelType.length > 0 ? true : false}>Tip goriva</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                fullWidth\r\n                value={this.state.fuelType}\r\n                onChange={(e, d) => this.handleChangeFuel(e, d)}\r\n                input={<OutlinedInput label=\"Prodajalec\" notched={this.state.fuelType.length > 0 ? true : false} />}\r\n                renderValue={(selected) => {\r\n                  let arr = [];\r\n                  selected.forEach(s => {\r\n                    let sName = gasNames.find(n => n.key === s);\r\n                    arr.push(sName.name)\r\n                  })\r\n                  return arr.join(\", \")\r\n                }}\r\n              >\r\n                {gasNames.map((name) => (\r\n                  <MenuItem key={name.name} value={name.key}>\r\n                    <Checkbox checked={this.state.fuelType.indexOf(name.key) > -1} />\r\n                    <ListItemText primary={name.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <div style={{ margin: \"0px auto\", display: \"flex\", alignItems: \"center\" }}>\r\n              {/* <TextField id=\"standard-basic\" variant=\"outlined\" value={this.state.myPos !== undefined ? this.state.myPos : \"\"} disabled fullWidth /> */}\r\n              <FormControl fullWidth>\r\n                <InputLabel id=\"demo-simple-select-label\">Oddaljenost</InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={this.state.distanceValue}\r\n                  label=\"Oddaljenost\"\r\n                  onChange={(e) => this.handleChangeDistance(e)}\r\n                >\r\n                  {distance.map((d) => (\r\n                    <MenuItem value={d.key}>{d.name}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              {this.state.myPos !== undefined ? <Button variant=\"contained\" onClick={this.clearGeo} color=\"error\" style={{ margin: \"12px\" }}>Počisti</Button> : <Button variant=\"contained\" onClick={this.getGeoLocation} style={{ margin: \"12px\" }}>Moja lokacija</Button>}\r\n            </div>\r\n            <div style={{ marginBottom: \"8px\" }}></div>\r\n\r\n          </div>\r\n          <div className=\"StationWrap\">\r\n            {data !== undefined ? data.map((b, index) => {\r\n              return <Station stationData={b} onSelectStation={this.selectStation} selectedId={this.state.selectedId} />\r\n            }) : <div></div>}\r\n          </div>\r\n        </div>\r\n        <div className=\"chart\">\r\n          <div>{this.state.selected.name}</div>\r\n          <Line data={dataChart} options={options} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}